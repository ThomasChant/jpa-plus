import java.time.LocalDateTime

allprojects {
    group = 'com.ct'
    version = "1.0-SNAPSHOT"
}

ext {
    configuration = [
            javaVersion = JavaVersion.VERSION_1_8
    ]

    versions = [
            springVersion = '5.3.7',
            springBootVersion = '2.4.5',
            jsqlparserVersion = '4.0',
            junitVersion = '5.7.2',
            commonsLangVersion = '3.10',
            commonsBeanutilsVersion ='1.9.4',
            druidVersion = '1.1.22',
            mysqlVersion = '8.0.19'
    ]
}
buildscript {
    ext {
        lombokVersion = "4.1.6"
        junitPlatformVersion = "1.2.0"
        dependencyManagementVersion = "1.0.9.RELEASE"
        springBootVersion = "2.2.6.RELEASE"

        mvnRepoUser = "deployment"
        mvnRepoPwd = "deploy123456"
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/repository/public/" }
    }

    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:$lombokVersion"
//        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion"
//        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"

    }
}

description = "jpa 增强包，简化条件查询，联表查询"

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: "io.freefair.lombok"

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

//    dependencies {
//        testImplementation "${lib["assertj-core"]}"
//        testImplementation "${lib["junit-jupiter"]}"
//        testImplementation "org.mockito:mockito-junit-jupiter:3.11.0"
//        testImplementation "${lib["lagarto"]}"
//        testImplementation "${lib["logback-classic"]}"
//    }
    dependencies {
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        testCompile "mysql:mysql-connector-java:${mysqlVersion}"
        testCompile("com.alibaba:druid-spring-boot-starter:${druidVersion}")

//        compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
//        compile("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        into("META-INF/maven/$project.group/$project.name") {
            from { generatePomFileForMavenJavaPublication }
            rename ".*", "pom.xml"
        }
        afterEvaluate {
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
//                attributes 'Bundle-DocURL': 'https://mybatis.plus/'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
            }
        }
    }



    //noinspection GroovyAssignabilityCheck
    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
        exclude("**/mysql/**")
        exclude("**/phoenix/**")
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }


    publishing {
        repositories {
            maven {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {

            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'springdatajpa-plus'
                    packaging 'jar'
                    description = 'An enhanced toolkit of spring data jpa to simplify development.'
                    url = 'https://github.com/ThomasChant/jpa-plus'

//                    scm {
//                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
//                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
//                        url = 'https://github.com/baomidou/mybatis-plus'
//                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'ThomasChant'
                            name = 'ct'
                            email = 'xgct0505@qq.com'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}